apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // prometheus reciever
    prometheus.scrape "node" {
    targets = [{
        __address__ = "prometheus-node-exporter:9100",
    }]
    forward_to     = [prometheus.remote_write.mimir.receiver]
    job_name       = "node"
    scrape_interval = "30s"
    metrics_path   = "/metrics"
    }
    prometheus.scrape "state" {
    targets = [{
        __address__ = "kube-state-metrics:8080",
    }]
    forward_to     = [prometheus.remote_write.mimir.receiver]
    job_name       = "state"
    scrape_interval = "30s"
    metrics_path   = "/metrics"
    }
    prometheus.scrape "nautible_examples" {
    targets = [{
        __address__ = "nautible-app-examples-java.nautible-app-examples.svc.cluster.local:8080",
    }]
    forward_to     = [prometheus.remote_write.mimir.receiver]
    job_name       = "otel-collector-examples"
    scrape_interval = "30s"
    metrics_path   = "/q/metrics"
    }

    // log reciever
    discovery.kubernetes "k8s" {
    role = "pod"
    }
    discovery.relabel "k8s" {
    targets = discovery.kubernetes.k8s.targets
    rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_label_name"]
        target_label  = "job"
        separator     = "/"
    }
    rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label  = "__path__"
        separator     = "/"
        replacement   = "/var/log/pods/*$1/*.log"
    }
    }
    local.file_match "pods" {
    path_targets = discovery.relabel.k8s.output
    }
    loki.source.file "podlog" {
    targets    = local.file_match.pods.targets
    forward_to = [loki.write.loki.receiver]
    }

    // otel reciever
    otelcol.receiver.otlp "otlp" {
    grpc {
        endpoint = "0.0.0.0:4317"
    }
    http {
        endpoint = "0.0.0.0:4318"
    }
    output {
        traces  = [otelcol.processor.memory_limiter.otlp.input]
    }
    }

    // processer
    otelcol.processor.memory_limiter "otlp" {
        check_interval   = "1s"
        limit_percentage = 90
        spike_limit_percentage = 95
        output {
            traces  = [otelcol.exporter.otlp.tempo.input]
        }
    }

    // mimir exporter
    prometheus.remote_write "mimir" {
    endpoint {
        url = format(
        "http://%s/api/v1/push",
        coalesce(env("REMOTE_WRITE_HOST"), "mimir-distributor-headless:8080"),
        )
        headers = {
            "X-Scope-OrgID" = "nautible",
        }
    }
    }

    // loki exporter
    loki.write "loki" {
    endpoint {
        url = format(
        "http://%s/loki/api/v1/push",
        coalesce(env("LOKI_HOST"), "loki-gateway"),
        )
    }
    }

    // tempo exporter
    otelcol.exporter.otlp "tempo" {
    client {
        endpoint = coalesce(env("TEMPO_HOST"), "tempo-distributor:4317")
        tls {
        insecure = true
        }
    }
    }

    // alloy observability
    prometheus.exporter.self "alloy" {}
    prometheus.scrape "alloy" {
    targets    = prometheus.exporter.self.alloy.targets
    forward_to = [prometheus.remote_write.mimir.receiver]
    }
    logging {
    level = "debug"
    // Forward internal logs to the local Loki instance.
    write_to = [loki.write.loki.receiver]
    }
    tracing {
    // Write all spans. Don't do this in production!
    sampling_fraction = 1.0

    // Forward internal spans to the local Tempo instance.
    write_to = [otelcol.exporter.otlp.tempo.input]
    }
