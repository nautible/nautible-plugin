apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    // log reciever
    discovery.kubernetes "k8s" {
        role = "pod"
    }
    discovery.relabel "k8s" {
        targets = discovery.kubernetes.k8s.targets
        rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_label_name"]
            target_label  = "job"
            separator     = "/"
        }
        rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            target_label  = "__path__"
            separator     = "/"
            replacement   = "/var/log/pods/*$1/*.log"
        }
    }
    local.file_match "pods" {
        path_targets = discovery.relabel.k8s.output
    }
    loki.source.file "podlog" {
        targets    = local.file_match.pods.targets
        forward_to = [loki.process.docker.receiver]
    }

    // otel reciever
    otelcol.receiver.otlp "otlp" {
        grpc {
            endpoint = "0.0.0.0:4317"
        }
        http {
            endpoint = "0.0.0.0:4318"
        }
        output {
            traces  = [otelcol.processor.memory_limiter.otlp.input]
        }
    }


    // processer
    otelcol.processor.memory_limiter "otlp" {
        check_interval   = "1s"
        limit_percentage = 90
        spike_limit_percentage = 95
        output {
            traces  = [otelcol.exporter.otlp.tempo.input]
        }
    }

    loki.process "docker" {
        forward_to = [loki.write.loki.receiver]

        stage.docker {}
        stage.json {
            expressions = {
                level = "level",
                timestamp = "timestamp",
                hostName = "hostName",
                message = "message",
                mdc = "mdc",
            }
        }
        stage.json {
            expressions = {
                x_request_id = `"x-request-id"`,
                url = "url",
                http_method = `"http-method"`,
                gRPC_method = `"gRPC-method"`,
            }
        }
        stage.labels {
            values = {
                level = "",
                timestamp = "",
                hostName = "",
                message = "",
                mdc = "",
                url = "",
                x_request_id = "",
                http_method = "",
                gRPC_method = "",
            }
        }
    }

    // loki exporter
    loki.write "loki" {
        endpoint {
            url = format("http://%s/loki/api/v1/push", coalesce(env("LOKI_HOST"), "loki-gateway"),
            )
        }
    }

    // tempo exporter
    otelcol.exporter.otlp "tempo" {
        client {
            endpoint = coalesce(env("TEMPO_HOST"), "tempo:4317")
            tls {
                insecure = true
            }
        }
    }

    // alloy observability
    logging {
        level = "debug"
        // Forward internal logs to the local Loki instance.
        write_to = [loki.write.loki.receiver]
    }
    tracing {
        // Write all spans. Don't do this in production!
        sampling_fraction = 0.1

        // Forward internal spans to the local Tempo instance.
        write_to = [otelcol.exporter.otlp.tempo.input]
    }
